//Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        ArrayList <ArrayList <Integer>> listOfLists= new ArrayList <ArrayList <Integer>> (); 
        averageOfLevelsHelper(root, 0, listOfLists);
        List<Double> resultList = new ArrayList<Double>();
        
        for(ArrayList<Integer> list : listOfLists ){
            double total =0;
            double numberOfElements = 0;
            
            for( int values :list){
                total = total + values;
                numberOfElements++;
            }
            
            resultList.add(total/numberOfElements);
        }
        return resultList;
        
    }
    
    void averageOfLevelsHelper(TreeNode node, int level, ArrayList<ArrayList<Integer> > listOfLists){
        if (node==null)
            return;
        
        ArrayList currentList = null;
        if(listOfLists.size() >level){
            currentList = listOfLists.get(level);
            currentList.add(node.val);
        }else{
            currentList = new ArrayList<Double>();
            currentList.add(node.val);
            listOfLists.add(currentList);
            
        }
        
        averageOfLevelsHelper(node.left, level+1, listOfLists);
        averageOfLevelsHelper(node.right, level+1, listOfLists);
            
    }
}
