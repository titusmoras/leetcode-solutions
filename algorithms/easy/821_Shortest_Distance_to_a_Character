//Given a string S and a character C, return an array of integers representing the shortest distance 
//from the character C in the string.

//Example 1:

//Input: S = "loveleetcode", C = 'e'
//Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
 

//Note:

//S string length is in [1, 10000].
//C is a single character, and guaranteed to be in string S.
//All letters in S and C are lowercase.

class Solution {
    public int[] shortestToChar(String S, char C) {
        int[] distance =  new int[S.length()];
// section 1 - solve till the first char
        int firstCharIndex = -1;
        for(int i = 0; firstCharIndex==-1; i++){
            if(S.charAt(i)!=C) //not found the Char yet    
               distance[i]=i*-1;
            else{//found the first char match
                firstCharIndex = i;
                for(int j=i-1;j >=0;j--)
                    distance[j]= distance[j]+ i;
            }
        
        }
        
// section 2 - solve for the subsequent finds
        int currentIndex = firstCharIndex;
        
        for(int i = firstCharIndex; i < S.length(); i++)
        {
            if(S.charAt(i)!=C)
                distance[i]=i - currentIndex;
            else{
                currentIndex = i;
                int j = i-1;
                while(j>=0 && distance[j]> currentIndex - j)
                {distance[j] = currentIndex - j;j--;}
            }
        
        }         
                
                
                
       return distance; 
        
    
    }
}
