
//Given a string, find the length of the longest substring without repeating characters.

//Examples:

//Given "abcabcbb", the answer is "abc", which the length is 3.

//Given "bbbbb", the answer is "b", with the length of 1.

//Given "pwwkew", the answer is "wke", with the length of 3. 
//Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

class Solution {

    int maxUniqueLength;
    int currentUniqueCount;
    int uniqueSubStringCurrentIndex;    
    Map <Character, Integer> map;    
    Character CurrentChar;

    
    public int lengthOfLongestSubstring(String s) {

    map = new HashMap<Character, Integer>();
        
    for(int i = 0; i < s.length(); i++){
        CurrentChar = new Character(s.charAt(i));
        
        if(!map.containsKey(CurrentChar) || i - currentUniqueCount > map.get(CurrentChar)  ){
            map.put(CurrentChar, i);
            currentUniqueCount++;
            if(maxUniqueLength < currentUniqueCount)
                maxUniqueLength = currentUniqueCount;
        }
        else{
            int previousMatchIndex = map.get(CurrentChar);
            map.put(CurrentChar,i);
            currentUniqueCount=i - previousMatchIndex;
        }
    }
        
    return maxUniqueLength;   
    }
    
 
}
