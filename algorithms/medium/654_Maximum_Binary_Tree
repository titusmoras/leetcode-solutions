/**
*Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:
*The root is the maximum number in the array.
*The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.
*The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.
*Construct the maximum tree by the given array and output the root node of this tree.
**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return constrMaxBinTreeHelper(nums, 0, nums.length);
        
    }
    
    private TreeNode constrMaxBinTreeHelper(int[] nums, int startIndex, int endIndex){
        if(startIndex>=endIndex)
            return null;

        int maxIndex = startIndex;
        for(int i = startIndex,maxValue = nums[startIndex];i < endIndex; i++ )
            if(nums[i] > maxValue){
                maxValue = nums[i];
                maxIndex = i;
                
            }
        
        TreeNode node = new TreeNode(nums[maxIndex]);
        node.left = constrMaxBinTreeHelper(nums, startIndex, maxIndex);
        node.right = constrMaxBinTreeHelper(nums, maxIndex+1, endIndex);
           
        return node;
      }
        
        
            
        
        
    }




