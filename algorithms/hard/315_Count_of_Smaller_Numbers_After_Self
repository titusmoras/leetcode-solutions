// DISCLAIMER Backtracking Recursive solution - fails for test cases with large numbers

//You are given an integer array nums and you have to return a new counts array.
//The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

//Example:

//Given nums = [5, 2, 6, 1]

//To the right of 5 there are 2 smaller elements (2 and 1).
//To the right of 2 there is only 1 smaller element (1).
//To the right of 6 there is 1 smaller element (1).
//To the right of 1 there is 0 smaller element.
//Return the array [2, 1, 1, 0].


class Solution {
    public List<Integer> countSmaller(int[] nums) {
     
        List <Integer> resultList = new ArrayList<Integer>();
        if(nums.length > 100) return resultList;// running into stack overflow for large numbers
        // need a non-recursive solution
        for(int i = 0; i< nums.length; i++)
            countSmallerHelper(nums,i,i+1, 0, resultList);
        return resultList;
    }
    
    void countSmallerHelper(int[] nums, int selectedValueIndex,int startRightIndex, int countSmaller, List<Integer> resultList){
        if(startRightIndex>=nums.length){
            resultList.add(selectedValueIndex, countSmaller);
            return;                  
        }
        
        if(nums[selectedValueIndex] > nums[startRightIndex] )
            countSmallerHelper(nums,selectedValueIndex,startRightIndex+1, countSmaller+1, resultList);
        else
            countSmallerHelper(nums,selectedValueIndex,startRightIndex+1, countSmaller, resultList);
    }
}
